How To Prepare to Use!!

1.在GitHub上注册用户
    username: Kinsh
    email: 396934200@qq.com
    password: xxxxxxxxxx

2.在GitHub上新建一个repository: 例如: Simulator 分支：master

3.在Local上新建秘钥
    GitBash: ssh-keygen -t rsa -C "396934200@qq.com"
    More: 396934200@qq.com 是注册用的邮箱，生成id_rsa id_rsa.pub 一对秘钥文件
	
4.在GitHub的Account settings”--“SSH Keys”上新增SSH秘钥配置，使用id_rsa.pub中的文件内容
    
    GitBash: git config --global user.name "Kinsh"
    GitBash: git config --global user.email "396934200@qq.com"
    GitBash: git config --global --list
    GitBash: ssh -T git@github.com
	
    成功提示: You’ve successfully authenticated, but GitHub does not provide shell access.


How To Use !!

1.新增或删除远程地址

    GitBash: git init 
    GitBash: git remote add origin git@github.com:wondest/Simulator.git
    GitBash: git remote -v
    GitBash: git remote remove $name
	
2.新增或者切换分支
    GitBash: git checkout -b dev  
     或者
    GitBash: git branch dev
    GitBash: git checkout dev
	
    GitBash: git branch -d dev
	
    GitBash: git branch -a

3.获取分支
     git clone:
       git clone xxx.git
       git clone xxx.git yyy目录
	   
       GibBash: git clone https://github.com/wondest/Simulator.git
	 
     git fetch:
       git fetch origin
       git fetch origin xxx分支
	   
     git merge xxx分支、
       将xxx分支合并到当前分支
	   
     git pull:
       git pull origin
       git pull origin xxx分支
	   
     git pull 效果上等于 git fetch + git merge
	 
4.提交代码
  
    git add file1.txt
    git add file2.txt
    git add file3.txt
    git commit  -m  "add 3 files."
	
    git rm test.txt
    git commit -m "remove test.txt"
	
5.提交分支
    git push origin xxx分支
      将当前分支 推送到 远程的 xxx分支；
	
    git push origin master
     上面命令表示，将本地的master分支推送到origin主机的master分支。如果master不存在，则会被新建。
	
    git push origin --delete master  删除当前分支

6.举例：
  1. 开发某个网站。
  2. 为实现某个新的需求，创建一个分支。
  3. 在这个分支上开展工作。

  假设此时，你突然接到一个电话说有个很严重的问题需要紧急修补，那么可以按照下面的方式处理：

  a. 返回到原先已经发布到生产服务器上的分支。
  b. 为这次紧急修补建立一个新分支，并在其中修复问题。
  c. 通过测试后，回到生产服务器所在的分支，将修补分支合并进来，然后再推送到生产服务器上。
  d. 切换到之前实现新需求的分支，继续工作。

  
  创建一个新分支：iss53
  
      git checkout -b iss53  
    or
	  git branch iss53
      git checkout iss53
		
		
		版本迭代：c0 <- c1 <- c2
		master => c2
		iss53 => c2
		

   iss53 开始修复问题，产生了新的版本 c3
		版本迭代：c0 <- c1 <- c2 <- c3
        master => c2
		iss53 => c3
  
  
   很严重的问题接下来，你得进行紧急修补。我们创建一个紧急修补分支 hotfix 来开展工作，直到搞定
        git checkout master
		git checkout -b hotfix
		
   修复后产生新的版本 c4
        版本迭代：c0 <- c1 <- c2 <- c3  iss53
                                 <- c4  hotfix
			
        git checkout master			
		git merge hotfix  will use c4
		
		        版本迭代：c0 <- c1 <- c2 <- c3  iss53
                                         <- c4  hotfix master
		
		git branch -d hotfix
        
		        版本迭代：c0 <- c1 <- c2 <- c3  iss53
                                         <- c4  master
								
		git checkout master
		git merge iss53            will use c2 c3 c4 to merger
		git branch -d iss53

		        版本迭代：c0 <- c1 <- c2 <- c4        <- c6 master
                                         <- c3  <- c5
